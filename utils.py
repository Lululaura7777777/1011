import torch
import copy
import math
import torch.nn as nn
from torch.nn.functional import pad
import sacrebleu


## Dummy functions defined to use the same function run_epoch() during eval
class DummyOptimizer(torch.optim.Optimizer):
    def __init__(self):
        self.param_groups = [{"lr": 0}]
        None

    def step(self):
        None

    def zero_grad(self, set_to_none=False):
        None


class DummyScheduler:
    def step(self):
        None

def clones(module, N):
    "Produce N identical layers."
    return nn.ModuleList([copy.deepcopy(module) for _ in range(N)])

def subsequent_mask(size):
    "Mask out subsequent positions."
    attn_shape = (1, size, size)
    subsequent_mask = torch.triu(torch.ones(attn_shape), diagonal=1).type(
        torch.uint8
    )
    return subsequent_mask == 0


def rate(step, model_size, factor, warmup):
    """
    we have to default the step to 1 for LambdaLR function
    to avoid zero raising to negative power.
    """
    if step == 0:
        step = 1
    return factor * (
        model_size ** (-0.5) * min(step ** (-0.5), step * warmup ** (-1.5))
    )


class PositionalEncoding(nn.Module):
    "Implement the PE function."

    def __init__(self, d_model, dropout, max_len=5000):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)

        # Compute the positional encodings once in log space.
        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len).unsqueeze(1)
        div_term = torch.exp(
            torch.arange(0, d_model, 2) * -(math.log(10000.0) / d_model)
        )
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)

        self.register_buffer("pe", pe)

    def forward(self, x):
        pe = self.pe.unsqueeze(0)
        x = x + pe[:, : x.size(1)].requires_grad_(False)
        return self.dropout(x)



def greedy_decode(model, src, src_mask, max_len, start_symbol):
    memory = model.encode(src, src_mask)
    ys = torch.zeros(1, 1).fill_(start_symbol).type_as(src.data)
    for i in range(max_len - 1):
        out = model.decode(
            memory, src_mask, ys, subsequent_mask(ys.size(1)).type_as(src.data)
        )
        prob = model.generator(out[:, -1])
        _, next_word = torch.max(prob, dim=1)
        next_word = next_word.data[0]
        ys = torch.cat(
            [ys, torch.zeros(1, 1).type_as(src.data).fill_(next_word)], dim=1
        )
    return ys


import torch

def beam_search_decode(model, src, src_mask, max_len, start_symbol, beam_size, end_idx):
    """
    Implement beam search decoding with 'beam_size' width.
    
    Parameters:
    - model: the model used for generating the sequence.
    - src: the input source sequence (e.g., tokens or embeddings).
    - src_mask: a mask applied to the source sequence.
    - max_len: the maximum length of the sequence to generate.
    - start_symbol: the starting symbol index (usually representing <start> token).
    - beam_size: the width of the beam (i.e., the number of hypotheses to keep).
    - end_idx: the index of the <end> token that indicates the end of the sequence.
    
    Returns:
    - The best sequence generated by beam search.
    """
    
    # Initialize the beam with the start symbol
    src = src.to(model.device)
    src_mask = src_mask.to(model.device)
    memory = model.encode(src, src_mask)  # Encode the source sequence
    
    # Start the beam search with the start symbol
    beam = [(torch.tensor([[start_symbol]], dtype=torch.long, device=model.device), 0)]  # (sequence, score)
    finished_sequences = []
    
    for _ in range(max_len):
        # Expand the current beam
        all_candidates = []
        for seq, score in beam:
            if seq[0, -1].item() == end_idx:  # If the last token is the end token
                finished_sequences.append((seq, score))  # Store the finished sequence
                continue
            
            # Decode the next step in the sequence using the model
            tgt_mask = model.generate_square_subsequent_mask(len(seq)).to(model.device)
            output = model.decode(memory, src_mask, seq, tgt_mask)
            output_prob = model.generator(output[:, -1])  # Get probabilities for the last token
            log_probs = torch.log_softmax(output_prob, dim=-1)  # Convert to log probabilities
            
            # Select top k (beam size) candidates for the next token
            topk_probs, topk_idx = torch.topk(log_probs, beam_size, dim=-1)
            
            for i in range(beam_size):
                candidate = torch.cat([seq, topk_idx[:, i].unsqueeze(0)], dim=1)  # Append new token
                candidate_score = score + topk_probs[0, i].item()  # Update score
                all_candidates.append((candidate, candidate_score))
        
        # Select the top beam_size candidates across all expanded candidates
        all_candidates = sorted(all_candidates, key=lambda x: x[1], reverse=True)
        beam = all_candidates[:beam_size]
        
        # If all beams have ended (i.e., <end> token generated), stop
        if len(finished_sequences) == beam_size:
            break
    
    # If there are finished sequences, return the best one based on score
    if finished_sequences:
        finished_sequences = sorted(finished_sequences, key=lambda x: x[1], reverse=True)
        return finished_sequences[0][0]  # Return the best sequence
    
    # Otherwise, return the best unfinished sequence
    return beam[0][0]


def collate_batch(
    batch,
    src_pipeline,
    tgt_pipeline,
    src_vocab,
    tgt_vocab,
    device,
    max_padding=128,
    pad_id=2,
):
    bs_id = torch.tensor([0], device=device)  # <s> token id
    eos_id = torch.tensor([1], device=device)  # </s> token id
    src_list, tgt_list = [], []
    for s in batch:
        _src = s['de']
        _tgt = s['en']
        processed_src = torch.cat(
            [
                bs_id,
                torch.tensor(
                    src_vocab(src_pipeline(_src)),
                    dtype=torch.int64,
                    device=device,
                ),
                eos_id,
            ],
            0,
        )
        processed_tgt = torch.cat(
            [
                bs_id,
                torch.tensor(
                    tgt_vocab(tgt_pipeline(_tgt)),
                    dtype=torch.int64,
                    device=device,
                ),
                eos_id,
            ],
            0,
        )
        src_list.append(
            # warning - overwrites values for negative values of padding - len
            pad(
                processed_src,
                (
                    0,
                    max_padding - len(processed_src),
                ),
                value=pad_id,
            )
        )
        tgt_list.append(
            pad(
                processed_tgt,
                (0, max_padding - len(processed_tgt)),
                value=pad_id,
            )
        )

    src = torch.stack(src_list)
    tgt = torch.stack(tgt_list)
    return (src, tgt)


def remove_start_end_tokens(sent):

    if sent.startswith('<s>'):
        sent = sent[3:]

    if sent.endswith('</s>'):
        sent = sent[:-4]

    return sent


def compute_corpus_level_bleu(refs, hyps):

    refs = [remove_start_end_tokens(sent) for sent in refs]
    hyps = [remove_start_end_tokens(sent) for sent in hyps]

    bleu = sacrebleu.corpus_bleu(hyps, [refs])

    return bleu.score

